"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const path = require("path");
const child_process = require("child_process");
const commander = require("commander");
const semver = require("semver");
let homebridge;
class HomebridgeConfigUi {
    constructor(log, config) {
        this.log = log;
        process.env.UIX_CONFIG_PATH = homebridge.user.configPath();
        process.env.UIX_STORAGE_PATH = homebridge.user.storagePath();
        commander
            .allowUnknownOption()
            .option('-P, --plugin-path [path]', '', (p) => process.env.UIX_CUSTOM_PLUGIN_PATH = p)
            .option('-I, --insecure', '', () => process.env.UIX_INSECURE_MODE = '1')
            .parse(process.argv);
        if (config.standalone || (process.env.HOMEBRIDGE_CONFIG_UI === '1' && semver.satisfies(process.env.CONFIG_UI_VERSION, '>=3.5.5', { includePrerelease: true }))) {
            this.log(`Running in Standalone Mode.`);
        }
        else if (config.noFork) {
            this.noFork();
        }
        else {
            this.fork();
        }
    }
    fork() {
        const ui = child_process.fork(path.resolve(__dirname, 'bin/fork'), null, {
            env: process.env,
        });
        this.log(`Spawning homebridge-config-ui-x with PID`, ui.pid);
        ui.on('close', () => {
            process.exit(1);
        });
        ui.on('error', (err) => { });
    }
    noFork() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.resolve().then(() => require('./main'));
        });
    }
    accessories(callback) {
        const accessories = [];
        callback(accessories);
    }
}
module.exports = (api) => {
    homebridge = api;
    homebridge.registerPlatform('homebridge-config-ui-x', 'config', HomebridgeConfigUi);
};
//# sourceMappingURL=index.js.map