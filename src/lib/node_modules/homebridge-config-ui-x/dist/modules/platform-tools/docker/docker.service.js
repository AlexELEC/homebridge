"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const dotenv = require("dotenv");
const child_process = require("child_process");
const common_1 = require("@nestjs/common");
const config_service_1 = require("../../../core/config/config.service");
const logger_service_1 = require("../../../core/logger/logger.service");
let DockerService = class DockerService {
    constructor(configService, logger) {
        this.configService = configService;
        this.logger = logger;
        this.dockerEnvVariables = [
            'HOMEBRIDGE_DEBUG',
            'HOMEBRIDGE_INSECURE',
        ];
    }
    getStartupScript() {
        return __awaiter(this, void 0, void 0, function* () {
            const script = yield fs.readFile(this.configService.startupScript, 'utf-8');
            return { script };
        });
    }
    updateStartupScript(script) {
        return __awaiter(this, void 0, void 0, function* () {
            yield fs.writeFile(this.configService.startupScript, script);
            return { script };
        });
    }
    restartDockerContainer(res) {
        return __awaiter(this, void 0, void 0, function* () {
            const cmd = 'killall s6-svscan';
            this.logger.log('Restarting the docker container, make sure you have --restart=always turned on or the container will not come back online');
            res.code(202).send({ ok: true, command: cmd });
            setTimeout(() => {
                child_process.exec('killall s6-svscan');
            }, 500);
        });
    }
    getDockerEnv() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield fs.pathExists(this.configService.dockerEnvFile))) {
                throw new common_1.NotFoundException();
            }
            const resp = {};
            const file = yield fs.readFile(this.configService.dockerEnvFile);
            const env = dotenv.parse(file);
            for (const key of this.dockerEnvVariables) {
                resp[key] = env[key] || process.env[key] || undefined;
                if (resp[key] === '1') {
                    resp[key] = true;
                }
                else if (resp[key] === '0') {
                    resp[key] = false;
                }
            }
            return resp;
        });
    }
    updateDockerEnv(env) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = ['### This will overide environment variables set using the docker run command ###'];
            for (const key of this.dockerEnvVariables) {
                if (env[key] !== undefined && env[key] !== null) {
                    if (typeof (env[key]) === 'boolean') {
                        env[key] = env[key] ? '1' : '0';
                    }
                    if (typeof env[key] === 'string' && !env[key].trim().length) {
                        return;
                    }
                    resp.push(`${key}="${String(env[key]).trim()}"`);
                }
            }
            resp.push('### This file is managed by homebridge-config-ui-x ###');
            yield fs.writeFile(this.configService.dockerEnvFile, resp.join('\n') + '\n');
        });
    }
};
DockerService = __decorate([
    common_1.Injectable(),
    __metadata("design:paramtypes", [config_service_1.ConfigService,
        logger_service_1.Logger])
], DockerService);
exports.DockerService = DockerService;
//# sourceMappingURL=docker.service.js.map