"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const color = require("bash-color");
const pty = require("node-pty-prebuilt-multiarch");
const common_1 = require("@nestjs/common");
const config_service_1 = require("../../../core/config/config.service");
const logger_service_1 = require("../../../core/logger/logger.service");
let TerminalService = class TerminalService {
    constructor(configService, logger) {
        this.configService = configService;
        this.logger = logger;
    }
    startSession(client, size) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.configService.enableTerminalAccess) {
                this.logger.error('Terminal is not enabled. Disconnecting client...');
                client.disconnect();
                return;
            }
            this.logger.log('Starting terminal session');
            const shell = (yield fs.pathExists('/bin/bash')) ? '/bin/bash' : '/bin/sh';
            const term = pty.spawn(shell, [], {
                name: 'xterm-color',
                cols: size.cols,
                rows: size.rows,
                cwd: this.configService.storagePath,
                env: process.env,
            });
            term.on('data', (data) => {
                client.emit('stdout', data);
            });
            term.on('exit', () => {
                try {
                    client.emit('stdout', color.red(`\n\r\n\rTerminal Session Ended\n\r\n\r`));
                }
                catch (e) {
                }
            });
            client.on('stdin', (data) => {
                term.write(data);
            });
            client.on('resize', (resize) => {
                try {
                    term.resize(resize.cols, resize.rows);
                }
                catch (e) { }
            });
            const onEnd = () => {
                client.removeAllListeners('stdin');
                client.removeAllListeners('resize');
                client.removeAllListeners('end');
                client.removeAllListeners('disconnect');
                try {
                    this.logger.log('Terminal session ended.');
                    term.kill();
                }
                catch (e) { }
            };
            client.on('end', onEnd.bind(this));
            client.on('disconnect', onEnd.bind(this));
        });
    }
};
TerminalService = __decorate([
    common_1.Injectable(),
    __metadata("design:paramtypes", [config_service_1.ConfigService,
        logger_service_1.Logger])
], TerminalService);
exports.TerminalService = TerminalService;
//# sourceMappingURL=terminal.service.js.map