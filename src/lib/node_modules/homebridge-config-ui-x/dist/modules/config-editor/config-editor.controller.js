"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const passport_1 = require("@nestjs/passport");
const config_editor_service_1 = require("./config-editor.service");
const admin_guard_1 = require("../../core/auth/guards/admin.guard");
let ConfigEditorController = class ConfigEditorController {
    constructor(configEditorService) {
        this.configEditorService = configEditorService;
    }
    getConfig() {
        return this.configEditorService.getConfigFile();
    }
    updateConfig(body) {
        return this.configEditorService.updateConfigFile(body);
    }
    listConfigBackups() {
        return this.configEditorService.listConfigBackups();
    }
    getBackup(param) {
        return this.configEditorService.getConfigBackup(param.backupId);
    }
    deleteAllConfigBackups() {
        return this.configEditorService.deleteAllConfigBackups();
    }
};
__decorate([
    common_1.UseGuards(admin_guard_1.AdminGuard),
    common_1.Get(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ConfigEditorController.prototype, "getConfig", null);
__decorate([
    common_1.UseGuards(admin_guard_1.AdminGuard),
    common_1.Post(),
    __param(0, common_1.Body()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ConfigEditorController.prototype, "updateConfig", null);
__decorate([
    common_1.UseGuards(admin_guard_1.AdminGuard),
    common_1.Get('/backups'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ConfigEditorController.prototype, "listConfigBackups", null);
__decorate([
    common_1.UseGuards(admin_guard_1.AdminGuard),
    common_1.Get('/backups/:backupId(\\d+)'),
    __param(0, common_1.Param()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ConfigEditorController.prototype, "getBackup", null);
__decorate([
    common_1.UseGuards(admin_guard_1.AdminGuard),
    common_1.Delete('/backups'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ConfigEditorController.prototype, "deleteAllConfigBackups", null);
ConfigEditorController = __decorate([
    common_1.UseGuards(passport_1.AuthGuard()),
    common_1.Controller('config-editor'),
    __metadata("design:paramtypes", [config_editor_service_1.ConfigEditorService])
], ConfigEditorController);
exports.ConfigEditorController = ConfigEditorController;
//# sourceMappingURL=config-editor.controller.js.map